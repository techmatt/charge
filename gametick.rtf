{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14000\viewh18860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 # the point of this is to make a game state that is independent of the order in which charges are processed\
\
For each component:\
	decrement occupied_for\
	if occupied_for <= 0:\
		set available\
	else\
		set unavailable\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 	component.num_targeting_this_tick=0\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
For each charge:\
	if charge is moving:\
		if charge reaches destination:\
			process destination at end of turn\
			# for non-wires, destination.occupied_until should equal 1 now\
		mark charge as resolved\
		continue  #done with charge\
\
	if charge was being held:\
		current_location.occupied_for = 1\
		if source is closed or has a held charge in it\
			forget source\
	\
	# try to find destinations for charges\
 \
for i in range(6): #try this 6 times\
	for each unresolved charge\
		find intended_destination, without a charge traveling towards source\
		if there are no destinations\
			if location.holdable:\
				mark charge as held\
				mark charge as resolved\
			else:\
				Destroy the charge.  Just this charge.\
	\
		intended_destination.num_targeting_this_tick++\
		update charge's intended_destination\
	\
	for each unresolved charge\
		if destination.num_targeting_this_tick=1:\
			set charge's destination to intended_destination\
			update destination.unavailable_until\
			mark charge as resolved\
		else:\
			destination.occupied_till = 1\
\
for each component 		\
	process any effects for charges that just landed there.}